import axios from 'axios';

// Used for validating form data against a json schema
import Ajv from 'ajv';

// Form select input options
import countries from '@/assets/json/countries.json';

import formDataSchema from '@/assets/json/schema/subscriber.schema.json';

// Create ajv instance
const ajv = new Ajv({
  // Run full validation, TODO set false for perfomance/security
  allErrors: true,
  // Full format is more restrictive and slow validation. E.g., 25:00:00 and 2015/14/33 will be invalid time and date in 'full' mode but it will be valid in 'fast' mode.
  format: 'full',
  // function for loading schema $ref
  loadSchema: uri => this.axios.get(uri),
  // Inject default values into formdata from json schema when data missing, undefined, null or ""
  useDefaults: 'empty',
  // data types coerced to the types specified in your schema type
  coerceTypes: 'array',
});

const validater = ajv.compile(formDataSchema);

export const state = {
  entrant: {
    first_name: null,
    last_name: null,
    email: null,
    country_iso: '',
    hash: null,
    entry_text: '',
    dob: '',
  },

  friends: [
    {
      first_name: null,
      last_name: null,
      email: null,
    },
  ],
  countries,

  // Form submitted true display all form field messages ~formDirty
  formSubmitted: false,
  // initial form data from subsrciber api
  initialFormData: {},
  // current form data state
  currentFormData: {
    secret: process.env.API_SECRET,
    first_name: null,
    last_name: null,
    email: null,
    country_iso: '',
    hash: null,
    entry_text: '',
    dob: '1904-02-25',
  },
  // Set of validation for form fields (generated by ajv)
  formValidation: [],
  // Set of validation for form fields, returned by the subforms-api
  serverValidation: [],
};

export const getters = {
  getFormDataById: state => id => state.currentFormData[id],

  getFormValidationById: state => id =>
    state.formValidation.find(error => {
      if (error.dataPath === `.${id}`) {
        return true;
      }
      if (error.params.missingProperty === id) {
        return true;
      }
      return false;
    }),
};

export const mutations = {
  setFormDataById(currentState, payload) {
    const newState = currentState;
    newState.currentFormData[payload.id] = payload.value;
  },
  addMessage(currentState, messages) {
    const newState = currentState;
    if (messages) {
      newState.messages = { ...currentState.messages, ...messages };
    } else {
      newState.messages = {};
    }
  },
  addValidation(currentState, formValidation) {
    const newState = currentState;
    if (formValidation) {
      newState.formValidation = formValidation;
    } else {
      newState.formValidation = [];
    }
  },
  setServerValidation(currentState, serverValidation) {
    const newState = currentState;
    if (serverValidation) {
      newState.serverValidation = serverValidation;
    } else {
      newState.serverValidation = [];
    }
  },
  setCurrentFormData(currentState, currentFormData) {
    const newState = currentState;
    if (currentFormData) {
      newState.currentFormData = currentFormData;
    } else {
      newState.currentFormData = {};
    }
  },
  setFormSubmitted(currentState, formSubmitted) {
    const newState = currentState;
    newState.formSubmitted = formSubmitted;
  },
  addFriend(currentState) {
    const newState = currentState;
    if (currentState.friends.length < 3) {
      const clone = {
        first_name: null,
        last_name: null,
        email: null,
      };
      newState.friends.push(clone);
    }
  },
  removeFriend(currentState, index) {
    const newState = currentState;
    newState.friends.splice(index, 1);
  },
};

export const actions = {
  async setServerValidation({ commit }, payload) {
    await commit('setServerValidation', payload);
  },
  // send form data to backend
  async submit({ commit, dispatch }) {
    console.log('submitting');
    commit('setFormSubmitted', true);

    const url = `${process.env.API_BASE_URL}/api/enter`;
    await axios
      .post(url, {
        ...this.state.currentFormData,
        locale: this.state.i18n.locale,
      })
      .then(response => {
        console.log('submit response');
        console.log(response);
      })
      .catch(error => {
        if (error.response) {
          // The request was made and the server responded with a status code
          // that falls out of the range of 2xx
          console.log(error.response.data);
          console.log(error.response.status);
          console.log(error.response.headers);
        } else if (error.request) {
          // The request was made but no response was received
          // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
          // http.ClientRequest in node.js
          console.log(error.request);
        } else {
          // Something happened in setting up the request that triggered an Error
          console.log('Error', error.message);
        }
        console.log(error.config);
      });
    console.log('submitted');
  },
  // validate form data
  validate({ commit }) {
    let valid = false;
    // commit('setFormSubmitted', true);

    const validateData = { ...this.state.currentFormData };
    // Check formdata is valid against json schema
    validater(validateData);
    // Check formdata is valid against json schema
    valid = validater(validateData);
    commit('addValidation', validater.errors);
    // Set currentformdata to ajv transformed data
    commit('setCurrentFormData', validateData);
    if (valid) {
      // submit formData
      // console.log('data valid');
      // dispatch('submit').then(response => {
      //   console.log(response);
      // });
    } else {
      // you have validation errors
      // console.log('data not valid');
      // console.log(validate.errors);
    }

    return valid;
  },
};
